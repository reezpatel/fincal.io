//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type TransactionSource string

const (
	TransactionSource_DepositAccount  TransactionSource = "deposit_account"
	TransactionSource_CreditCard      TransactionSource = "credit_card"
	TransactionSource_SecurityAccount TransactionSource = "security_account"
	TransactionSource_Entity          TransactionSource = "entity"
	TransactionSource_Asset           TransactionSource = "asset"
	TransactionSource_Loan            TransactionSource = "loan"
)

func (e *TransactionSource) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "deposit_account":
		*e = TransactionSource_DepositAccount
	case "credit_card":
		*e = TransactionSource_CreditCard
	case "security_account":
		*e = TransactionSource_SecurityAccount
	case "entity":
		*e = TransactionSource_Entity
	case "asset":
		*e = TransactionSource_Asset
	case "loan":
		*e = TransactionSource_Loan
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for TransactionSource enum")
	}

	return nil
}

func (e TransactionSource) String() string {
	return string(e)
}
