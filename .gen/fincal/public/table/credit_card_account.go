//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CreditCardAccount = newCreditCardAccountTable("public", "credit_card_account", "")

type creditCardAccountTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	UserID       postgres.ColumnInteger
	WorkspaceID  postgres.ColumnInteger
	CurrencyCode postgres.ColumnString
	Balance      postgres.ColumnFloat
	CreditLimit  postgres.ColumnFloat
	InterestRate postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CreditCardAccountTable struct {
	creditCardAccountTable

	EXCLUDED creditCardAccountTable
}

// AS creates new CreditCardAccountTable with assigned alias
func (a CreditCardAccountTable) AS(alias string) *CreditCardAccountTable {
	return newCreditCardAccountTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CreditCardAccountTable with assigned schema name
func (a CreditCardAccountTable) FromSchema(schemaName string) *CreditCardAccountTable {
	return newCreditCardAccountTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CreditCardAccountTable with assigned table prefix
func (a CreditCardAccountTable) WithPrefix(prefix string) *CreditCardAccountTable {
	return newCreditCardAccountTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CreditCardAccountTable with assigned table suffix
func (a CreditCardAccountTable) WithSuffix(suffix string) *CreditCardAccountTable {
	return newCreditCardAccountTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCreditCardAccountTable(schemaName, tableName, alias string) *CreditCardAccountTable {
	return &CreditCardAccountTable{
		creditCardAccountTable: newCreditCardAccountTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newCreditCardAccountTableImpl("", "excluded", ""),
	}
}

func newCreditCardAccountTableImpl(schemaName, tableName, alias string) creditCardAccountTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		UserIDColumn       = postgres.IntegerColumn("user_id")
		WorkspaceIDColumn  = postgres.IntegerColumn("workspace_id")
		CurrencyCodeColumn = postgres.StringColumn("currency_code")
		BalanceColumn      = postgres.FloatColumn("balance")
		CreditLimitColumn  = postgres.FloatColumn("credit_limit")
		InterestRateColumn = postgres.FloatColumn("interest_rate")
		allColumns         = postgres.ColumnList{IDColumn, UserIDColumn, WorkspaceIDColumn, CurrencyCodeColumn, BalanceColumn, CreditLimitColumn, InterestRateColumn}
		mutableColumns     = postgres.ColumnList{UserIDColumn, WorkspaceIDColumn, CurrencyCodeColumn, BalanceColumn, CreditLimitColumn, InterestRateColumn}
	)

	return creditCardAccountTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		UserID:       UserIDColumn,
		WorkspaceID:  WorkspaceIDColumn,
		CurrencyCode: CurrencyCodeColumn,
		Balance:      BalanceColumn,
		CreditLimit:  CreditLimitColumn,
		InterestRate: InterestRateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
