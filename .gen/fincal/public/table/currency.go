//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Currency = newCurrencyTable("public", "currency", "")

type currencyTable struct {
	postgres.Table

	// Columns
	Code         postgres.ColumnString
	Symbol       postgres.ColumnString
	ExchangeRate postgres.ColumnFloat
	LastUpdated  postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CurrencyTable struct {
	currencyTable

	EXCLUDED currencyTable
}

// AS creates new CurrencyTable with assigned alias
func (a CurrencyTable) AS(alias string) *CurrencyTable {
	return newCurrencyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CurrencyTable with assigned schema name
func (a CurrencyTable) FromSchema(schemaName string) *CurrencyTable {
	return newCurrencyTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CurrencyTable with assigned table prefix
func (a CurrencyTable) WithPrefix(prefix string) *CurrencyTable {
	return newCurrencyTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CurrencyTable with assigned table suffix
func (a CurrencyTable) WithSuffix(suffix string) *CurrencyTable {
	return newCurrencyTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCurrencyTable(schemaName, tableName, alias string) *CurrencyTable {
	return &CurrencyTable{
		currencyTable: newCurrencyTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newCurrencyTableImpl("", "excluded", ""),
	}
}

func newCurrencyTableImpl(schemaName, tableName, alias string) currencyTable {
	var (
		CodeColumn         = postgres.StringColumn("code")
		SymbolColumn       = postgres.StringColumn("symbol")
		ExchangeRateColumn = postgres.FloatColumn("exchange_rate")
		LastUpdatedColumn  = postgres.TimestampzColumn("last_updated")
		allColumns         = postgres.ColumnList{CodeColumn, SymbolColumn, ExchangeRateColumn, LastUpdatedColumn}
		mutableColumns     = postgres.ColumnList{SymbolColumn, ExchangeRateColumn, LastUpdatedColumn}
	)

	return currencyTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Code:         CodeColumn,
		Symbol:       SymbolColumn,
		ExchangeRate: ExchangeRateColumn,
		LastUpdated:  LastUpdatedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
