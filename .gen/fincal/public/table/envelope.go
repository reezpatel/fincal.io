//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Envelope = newEnvelopeTable("public", "envelope", "")

type envelopeTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	WorkspaceID postgres.ColumnInteger
	UserID      postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EnvelopeTable struct {
	envelopeTable

	EXCLUDED envelopeTable
}

// AS creates new EnvelopeTable with assigned alias
func (a EnvelopeTable) AS(alias string) *EnvelopeTable {
	return newEnvelopeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EnvelopeTable with assigned schema name
func (a EnvelopeTable) FromSchema(schemaName string) *EnvelopeTable {
	return newEnvelopeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EnvelopeTable with assigned table prefix
func (a EnvelopeTable) WithPrefix(prefix string) *EnvelopeTable {
	return newEnvelopeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EnvelopeTable with assigned table suffix
func (a EnvelopeTable) WithSuffix(suffix string) *EnvelopeTable {
	return newEnvelopeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEnvelopeTable(schemaName, tableName, alias string) *EnvelopeTable {
	return &EnvelopeTable{
		envelopeTable: newEnvelopeTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newEnvelopeTableImpl("", "excluded", ""),
	}
}

func newEnvelopeTableImpl(schemaName, tableName, alias string) envelopeTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		WorkspaceIDColumn = postgres.IntegerColumn("workspace_id")
		UserIDColumn      = postgres.IntegerColumn("user_id")
		allColumns        = postgres.ColumnList{IDColumn, WorkspaceIDColumn, UserIDColumn}
		mutableColumns    = postgres.ColumnList{WorkspaceIDColumn, UserIDColumn}
	)

	return envelopeTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		WorkspaceID: WorkspaceIDColumn,
		UserID:      UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
