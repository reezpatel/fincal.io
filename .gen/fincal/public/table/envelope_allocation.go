//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EnvelopeAllocation = newEnvelopeAllocationTable("public", "envelope_allocation", "")

type envelopeAllocationTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	MonthNotation postgres.ColumnInteger
	TemplateID    postgres.ColumnInteger
	Amount        postgres.ColumnFloat
	Utilized      postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EnvelopeAllocationTable struct {
	envelopeAllocationTable

	EXCLUDED envelopeAllocationTable
}

// AS creates new EnvelopeAllocationTable with assigned alias
func (a EnvelopeAllocationTable) AS(alias string) *EnvelopeAllocationTable {
	return newEnvelopeAllocationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EnvelopeAllocationTable with assigned schema name
func (a EnvelopeAllocationTable) FromSchema(schemaName string) *EnvelopeAllocationTable {
	return newEnvelopeAllocationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EnvelopeAllocationTable with assigned table prefix
func (a EnvelopeAllocationTable) WithPrefix(prefix string) *EnvelopeAllocationTable {
	return newEnvelopeAllocationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EnvelopeAllocationTable with assigned table suffix
func (a EnvelopeAllocationTable) WithSuffix(suffix string) *EnvelopeAllocationTable {
	return newEnvelopeAllocationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEnvelopeAllocationTable(schemaName, tableName, alias string) *EnvelopeAllocationTable {
	return &EnvelopeAllocationTable{
		envelopeAllocationTable: newEnvelopeAllocationTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newEnvelopeAllocationTableImpl("", "excluded", ""),
	}
}

func newEnvelopeAllocationTableImpl(schemaName, tableName, alias string) envelopeAllocationTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		MonthNotationColumn = postgres.IntegerColumn("month_notation")
		TemplateIDColumn    = postgres.IntegerColumn("template_id")
		AmountColumn        = postgres.FloatColumn("amount")
		UtilizedColumn      = postgres.FloatColumn("utilized")
		allColumns          = postgres.ColumnList{IDColumn, MonthNotationColumn, TemplateIDColumn, AmountColumn, UtilizedColumn}
		mutableColumns      = postgres.ColumnList{MonthNotationColumn, TemplateIDColumn, AmountColumn, UtilizedColumn}
	)

	return envelopeAllocationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		MonthNotation: MonthNotationColumn,
		TemplateID:    TemplateIDColumn,
		Amount:        AmountColumn,
		Utilized:      UtilizedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
