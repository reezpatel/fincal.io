//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EnvelopeTemplate = newEnvelopeTemplateTable("public", "envelope_template", "")

type envelopeTemplateTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	EnvelopeID postgres.ColumnInteger
	CategoryID postgres.ColumnInteger
	Amount     postgres.ColumnFloat
	Active     postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EnvelopeTemplateTable struct {
	envelopeTemplateTable

	EXCLUDED envelopeTemplateTable
}

// AS creates new EnvelopeTemplateTable with assigned alias
func (a EnvelopeTemplateTable) AS(alias string) *EnvelopeTemplateTable {
	return newEnvelopeTemplateTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EnvelopeTemplateTable with assigned schema name
func (a EnvelopeTemplateTable) FromSchema(schemaName string) *EnvelopeTemplateTable {
	return newEnvelopeTemplateTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EnvelopeTemplateTable with assigned table prefix
func (a EnvelopeTemplateTable) WithPrefix(prefix string) *EnvelopeTemplateTable {
	return newEnvelopeTemplateTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EnvelopeTemplateTable with assigned table suffix
func (a EnvelopeTemplateTable) WithSuffix(suffix string) *EnvelopeTemplateTable {
	return newEnvelopeTemplateTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEnvelopeTemplateTable(schemaName, tableName, alias string) *EnvelopeTemplateTable {
	return &EnvelopeTemplateTable{
		envelopeTemplateTable: newEnvelopeTemplateTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newEnvelopeTemplateTableImpl("", "excluded", ""),
	}
}

func newEnvelopeTemplateTableImpl(schemaName, tableName, alias string) envelopeTemplateTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		EnvelopeIDColumn = postgres.IntegerColumn("envelope_id")
		CategoryIDColumn = postgres.IntegerColumn("category_id")
		AmountColumn     = postgres.FloatColumn("amount")
		ActiveColumn     = postgres.BoolColumn("active")
		allColumns       = postgres.ColumnList{IDColumn, EnvelopeIDColumn, CategoryIDColumn, AmountColumn, ActiveColumn}
		mutableColumns   = postgres.ColumnList{EnvelopeIDColumn, CategoryIDColumn, AmountColumn, ActiveColumn}
	)

	return envelopeTemplateTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		EnvelopeID: EnvelopeIDColumn,
		CategoryID: CategoryIDColumn,
		Amount:     AmountColumn,
		Active:     ActiveColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
