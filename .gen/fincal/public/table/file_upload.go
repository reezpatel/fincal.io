//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FileUpload = newFileUploadTable("public", "file_upload", "")

type fileUploadTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	Path        postgres.ColumnString
	WorkspaceID postgres.ColumnInteger
	Name        postgres.ColumnString
	MimeType    postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	Linked      postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FileUploadTable struct {
	fileUploadTable

	EXCLUDED fileUploadTable
}

// AS creates new FileUploadTable with assigned alias
func (a FileUploadTable) AS(alias string) *FileUploadTable {
	return newFileUploadTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FileUploadTable with assigned schema name
func (a FileUploadTable) FromSchema(schemaName string) *FileUploadTable {
	return newFileUploadTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FileUploadTable with assigned table prefix
func (a FileUploadTable) WithPrefix(prefix string) *FileUploadTable {
	return newFileUploadTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FileUploadTable with assigned table suffix
func (a FileUploadTable) WithSuffix(suffix string) *FileUploadTable {
	return newFileUploadTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFileUploadTable(schemaName, tableName, alias string) *FileUploadTable {
	return &FileUploadTable{
		fileUploadTable: newFileUploadTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newFileUploadTableImpl("", "excluded", ""),
	}
}

func newFileUploadTableImpl(schemaName, tableName, alias string) fileUploadTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		PathColumn        = postgres.StringColumn("path")
		WorkspaceIDColumn = postgres.IntegerColumn("workspace_id")
		NameColumn        = postgres.StringColumn("name")
		MimeTypeColumn    = postgres.StringColumn("mime_type")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		LinkedColumn      = postgres.BoolColumn("linked")
		allColumns        = postgres.ColumnList{IDColumn, PathColumn, WorkspaceIDColumn, NameColumn, MimeTypeColumn, CreatedAtColumn, LinkedColumn}
		mutableColumns    = postgres.ColumnList{PathColumn, WorkspaceIDColumn, NameColumn, MimeTypeColumn, CreatedAtColumn, LinkedColumn}
	)

	return fileUploadTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Path:        PathColumn,
		WorkspaceID: WorkspaceIDColumn,
		Name:        NameColumn,
		MimeType:    MimeTypeColumn,
		CreatedAt:   CreatedAtColumn,
		Linked:      LinkedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
