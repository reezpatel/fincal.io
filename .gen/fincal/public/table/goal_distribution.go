//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var GoalDistribution = newGoalDistributionTable("public", "goal_distribution", "")

type goalDistributionTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	SourceID   postgres.ColumnInteger
	SourceType postgres.ColumnString
	Quantity   postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type GoalDistributionTable struct {
	goalDistributionTable

	EXCLUDED goalDistributionTable
}

// AS creates new GoalDistributionTable with assigned alias
func (a GoalDistributionTable) AS(alias string) *GoalDistributionTable {
	return newGoalDistributionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GoalDistributionTable with assigned schema name
func (a GoalDistributionTable) FromSchema(schemaName string) *GoalDistributionTable {
	return newGoalDistributionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GoalDistributionTable with assigned table prefix
func (a GoalDistributionTable) WithPrefix(prefix string) *GoalDistributionTable {
	return newGoalDistributionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GoalDistributionTable with assigned table suffix
func (a GoalDistributionTable) WithSuffix(suffix string) *GoalDistributionTable {
	return newGoalDistributionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGoalDistributionTable(schemaName, tableName, alias string) *GoalDistributionTable {
	return &GoalDistributionTable{
		goalDistributionTable: newGoalDistributionTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newGoalDistributionTableImpl("", "excluded", ""),
	}
}

func newGoalDistributionTableImpl(schemaName, tableName, alias string) goalDistributionTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		SourceIDColumn   = postgres.IntegerColumn("source_id")
		SourceTypeColumn = postgres.StringColumn("source_type")
		QuantityColumn   = postgres.FloatColumn("quantity")
		allColumns       = postgres.ColumnList{IDColumn, SourceIDColumn, SourceTypeColumn, QuantityColumn}
		mutableColumns   = postgres.ColumnList{SourceIDColumn, SourceTypeColumn, QuantityColumn}
	)

	return goalDistributionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		SourceID:   SourceIDColumn,
		SourceType: SourceTypeColumn,
		Quantity:   QuantityColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
