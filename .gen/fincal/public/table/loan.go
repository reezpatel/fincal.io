//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Loan = newLoanTable("public", "loan", "")

type loanTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnInteger
	WorkspaceID        postgres.ColumnInteger
	UserID             postgres.ColumnInteger
	Type               postgres.ColumnString
	InterestRate       postgres.ColumnFloat
	TermMonths         postgres.ColumnInteger
	LoanAmount         postgres.ColumnFloat
	PrincipalAmount    postgres.ColumnFloat
	LoanBalance        postgres.ColumnFloat
	PrincipalBalance   postgres.ColumnFloat
	MonthlyInstallment postgres.ColumnFloat
	StartDate          postgres.ColumnDate
	Status             postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LoanTable struct {
	loanTable

	EXCLUDED loanTable
}

// AS creates new LoanTable with assigned alias
func (a LoanTable) AS(alias string) *LoanTable {
	return newLoanTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LoanTable with assigned schema name
func (a LoanTable) FromSchema(schemaName string) *LoanTable {
	return newLoanTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LoanTable with assigned table prefix
func (a LoanTable) WithPrefix(prefix string) *LoanTable {
	return newLoanTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LoanTable with assigned table suffix
func (a LoanTable) WithSuffix(suffix string) *LoanTable {
	return newLoanTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLoanTable(schemaName, tableName, alias string) *LoanTable {
	return &LoanTable{
		loanTable: newLoanTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newLoanTableImpl("", "excluded", ""),
	}
}

func newLoanTableImpl(schemaName, tableName, alias string) loanTable {
	var (
		IDColumn                 = postgres.IntegerColumn("id")
		WorkspaceIDColumn        = postgres.IntegerColumn("workspace_id")
		UserIDColumn             = postgres.IntegerColumn("user_id")
		TypeColumn               = postgres.StringColumn("type")
		InterestRateColumn       = postgres.FloatColumn("interest_rate")
		TermMonthsColumn         = postgres.IntegerColumn("term_months")
		LoanAmountColumn         = postgres.FloatColumn("loan_amount")
		PrincipalAmountColumn    = postgres.FloatColumn("principal_amount")
		LoanBalanceColumn        = postgres.FloatColumn("loan_balance")
		PrincipalBalanceColumn   = postgres.FloatColumn("principal_balance")
		MonthlyInstallmentColumn = postgres.FloatColumn("monthly_installment")
		StartDateColumn          = postgres.DateColumn("start_date")
		StatusColumn             = postgres.StringColumn("status")
		allColumns               = postgres.ColumnList{IDColumn, WorkspaceIDColumn, UserIDColumn, TypeColumn, InterestRateColumn, TermMonthsColumn, LoanAmountColumn, PrincipalAmountColumn, LoanBalanceColumn, PrincipalBalanceColumn, MonthlyInstallmentColumn, StartDateColumn, StatusColumn}
		mutableColumns           = postgres.ColumnList{WorkspaceIDColumn, UserIDColumn, TypeColumn, InterestRateColumn, TermMonthsColumn, LoanAmountColumn, PrincipalAmountColumn, LoanBalanceColumn, PrincipalBalanceColumn, MonthlyInstallmentColumn, StartDateColumn, StatusColumn}
	)

	return loanTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		WorkspaceID:        WorkspaceIDColumn,
		UserID:             UserIDColumn,
		Type:               TypeColumn,
		InterestRate:       InterestRateColumn,
		TermMonths:         TermMonthsColumn,
		LoanAmount:         LoanAmountColumn,
		PrincipalAmount:    PrincipalAmountColumn,
		LoanBalance:        LoanBalanceColumn,
		PrincipalBalance:   PrincipalBalanceColumn,
		MonthlyInstallment: MonthlyInstallmentColumn,
		StartDate:          StartDateColumn,
		Status:             StatusColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
