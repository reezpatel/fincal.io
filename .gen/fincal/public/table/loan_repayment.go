//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var LoanRepayment = newLoanRepaymentTable("public", "loan_repayment", "")

type loanRepaymentTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	WorkspaceID   postgres.ColumnInteger
	TransactionID postgres.ColumnInteger
	UserID        postgres.ColumnInteger
	PrincipalPaid postgres.ColumnFloat
	InterestPaid  postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LoanRepaymentTable struct {
	loanRepaymentTable

	EXCLUDED loanRepaymentTable
}

// AS creates new LoanRepaymentTable with assigned alias
func (a LoanRepaymentTable) AS(alias string) *LoanRepaymentTable {
	return newLoanRepaymentTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LoanRepaymentTable with assigned schema name
func (a LoanRepaymentTable) FromSchema(schemaName string) *LoanRepaymentTable {
	return newLoanRepaymentTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LoanRepaymentTable with assigned table prefix
func (a LoanRepaymentTable) WithPrefix(prefix string) *LoanRepaymentTable {
	return newLoanRepaymentTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LoanRepaymentTable with assigned table suffix
func (a LoanRepaymentTable) WithSuffix(suffix string) *LoanRepaymentTable {
	return newLoanRepaymentTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLoanRepaymentTable(schemaName, tableName, alias string) *LoanRepaymentTable {
	return &LoanRepaymentTable{
		loanRepaymentTable: newLoanRepaymentTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newLoanRepaymentTableImpl("", "excluded", ""),
	}
}

func newLoanRepaymentTableImpl(schemaName, tableName, alias string) loanRepaymentTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		WorkspaceIDColumn   = postgres.IntegerColumn("workspace_id")
		TransactionIDColumn = postgres.IntegerColumn("transaction_id")
		UserIDColumn        = postgres.IntegerColumn("user_id")
		PrincipalPaidColumn = postgres.FloatColumn("principal_paid")
		InterestPaidColumn  = postgres.FloatColumn("interest_paid")
		allColumns          = postgres.ColumnList{IDColumn, WorkspaceIDColumn, TransactionIDColumn, UserIDColumn, PrincipalPaidColumn, InterestPaidColumn}
		mutableColumns      = postgres.ColumnList{WorkspaceIDColumn, TransactionIDColumn, UserIDColumn, PrincipalPaidColumn, InterestPaidColumn}
	)

	return loanRepaymentTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		WorkspaceID:   WorkspaceIDColumn,
		TransactionID: TransactionIDColumn,
		UserID:        UserIDColumn,
		PrincipalPaid: PrincipalPaidColumn,
		InterestPaid:  InterestPaidColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
