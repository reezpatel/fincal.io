//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Meta = newMetaTable("public", "meta", "")

type metaTable struct {
	postgres.Table

	// Columns
	Key   postgres.ColumnString
	Value postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MetaTable struct {
	metaTable

	EXCLUDED metaTable
}

// AS creates new MetaTable with assigned alias
func (a MetaTable) AS(alias string) *MetaTable {
	return newMetaTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MetaTable with assigned schema name
func (a MetaTable) FromSchema(schemaName string) *MetaTable {
	return newMetaTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MetaTable with assigned table prefix
func (a MetaTable) WithPrefix(prefix string) *MetaTable {
	return newMetaTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MetaTable with assigned table suffix
func (a MetaTable) WithSuffix(suffix string) *MetaTable {
	return newMetaTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMetaTable(schemaName, tableName, alias string) *MetaTable {
	return &MetaTable{
		metaTable: newMetaTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newMetaTableImpl("", "excluded", ""),
	}
}

func newMetaTableImpl(schemaName, tableName, alias string) metaTable {
	var (
		KeyColumn      = postgres.StringColumn("key")
		ValueColumn    = postgres.StringColumn("value")
		allColumns     = postgres.ColumnList{KeyColumn, ValueColumn}
		mutableColumns = postgres.ColumnList{ValueColumn}
	)

	return metaTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Key:   KeyColumn,
		Value: ValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
