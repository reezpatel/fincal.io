//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Security = newSecurityTable("public", "security", "")

type securityTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	MarketID   postgres.ColumnString
	Identifier postgres.ColumnString
	Value      postgres.ColumnFloat
	Type       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SecurityTable struct {
	securityTable

	EXCLUDED securityTable
}

// AS creates new SecurityTable with assigned alias
func (a SecurityTable) AS(alias string) *SecurityTable {
	return newSecurityTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SecurityTable with assigned schema name
func (a SecurityTable) FromSchema(schemaName string) *SecurityTable {
	return newSecurityTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SecurityTable with assigned table prefix
func (a SecurityTable) WithPrefix(prefix string) *SecurityTable {
	return newSecurityTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SecurityTable with assigned table suffix
func (a SecurityTable) WithSuffix(suffix string) *SecurityTable {
	return newSecurityTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSecurityTable(schemaName, tableName, alias string) *SecurityTable {
	return &SecurityTable{
		securityTable: newSecurityTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newSecurityTableImpl("", "excluded", ""),
	}
}

func newSecurityTableImpl(schemaName, tableName, alias string) securityTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		MarketIDColumn   = postgres.StringColumn("market_id")
		IdentifierColumn = postgres.StringColumn("identifier")
		ValueColumn      = postgres.FloatColumn("value")
		TypeColumn       = postgres.StringColumn("type")
		allColumns       = postgres.ColumnList{IDColumn, MarketIDColumn, IdentifierColumn, ValueColumn, TypeColumn}
		mutableColumns   = postgres.ColumnList{MarketIDColumn, IdentifierColumn, ValueColumn, TypeColumn}
	)

	return securityTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		MarketID:   MarketIDColumn,
		Identifier: IdentifierColumn,
		Value:      ValueColumn,
		Type:       TypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
