//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SecurityAccount = newSecurityAccountTable("public", "security_account", "")

type securityAccountTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	UserID      postgres.ColumnInteger
	WorkspaceID postgres.ColumnInteger
	MarketID    postgres.ColumnString
	Name        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SecurityAccountTable struct {
	securityAccountTable

	EXCLUDED securityAccountTable
}

// AS creates new SecurityAccountTable with assigned alias
func (a SecurityAccountTable) AS(alias string) *SecurityAccountTable {
	return newSecurityAccountTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SecurityAccountTable with assigned schema name
func (a SecurityAccountTable) FromSchema(schemaName string) *SecurityAccountTable {
	return newSecurityAccountTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SecurityAccountTable with assigned table prefix
func (a SecurityAccountTable) WithPrefix(prefix string) *SecurityAccountTable {
	return newSecurityAccountTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SecurityAccountTable with assigned table suffix
func (a SecurityAccountTable) WithSuffix(suffix string) *SecurityAccountTable {
	return newSecurityAccountTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSecurityAccountTable(schemaName, tableName, alias string) *SecurityAccountTable {
	return &SecurityAccountTable{
		securityAccountTable: newSecurityAccountTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newSecurityAccountTableImpl("", "excluded", ""),
	}
}

func newSecurityAccountTableImpl(schemaName, tableName, alias string) securityAccountTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		UserIDColumn      = postgres.IntegerColumn("user_id")
		WorkspaceIDColumn = postgres.IntegerColumn("workspace_id")
		MarketIDColumn    = postgres.StringColumn("market_id")
		NameColumn        = postgres.StringColumn("name")
		allColumns        = postgres.ColumnList{IDColumn, UserIDColumn, WorkspaceIDColumn, MarketIDColumn, NameColumn}
		mutableColumns    = postgres.ColumnList{UserIDColumn, WorkspaceIDColumn, MarketIDColumn, NameColumn}
	)

	return securityAccountTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		UserID:      UserIDColumn,
		WorkspaceID: WorkspaceIDColumn,
		MarketID:    MarketIDColumn,
		Name:        NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
