//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SecurityItem = newSecurityItemTable("public", "security_item", "")

type securityItemTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnInteger
	SecurityAccountID postgres.ColumnInteger
	SecurityID        postgres.ColumnInteger
	Quantity          postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SecurityItemTable struct {
	securityItemTable

	EXCLUDED securityItemTable
}

// AS creates new SecurityItemTable with assigned alias
func (a SecurityItemTable) AS(alias string) *SecurityItemTable {
	return newSecurityItemTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SecurityItemTable with assigned schema name
func (a SecurityItemTable) FromSchema(schemaName string) *SecurityItemTable {
	return newSecurityItemTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SecurityItemTable with assigned table prefix
func (a SecurityItemTable) WithPrefix(prefix string) *SecurityItemTable {
	return newSecurityItemTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SecurityItemTable with assigned table suffix
func (a SecurityItemTable) WithSuffix(suffix string) *SecurityItemTable {
	return newSecurityItemTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSecurityItemTable(schemaName, tableName, alias string) *SecurityItemTable {
	return &SecurityItemTable{
		securityItemTable: newSecurityItemTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newSecurityItemTableImpl("", "excluded", ""),
	}
}

func newSecurityItemTableImpl(schemaName, tableName, alias string) securityItemTable {
	var (
		IDColumn                = postgres.IntegerColumn("id")
		SecurityAccountIDColumn = postgres.IntegerColumn("security_account_id")
		SecurityIDColumn        = postgres.IntegerColumn("security_id")
		QuantityColumn          = postgres.IntegerColumn("quantity")
		allColumns              = postgres.ColumnList{IDColumn, SecurityAccountIDColumn, SecurityIDColumn, QuantityColumn}
		mutableColumns          = postgres.ColumnList{SecurityAccountIDColumn, SecurityIDColumn, QuantityColumn}
	)

	return securityItemTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		SecurityAccountID: SecurityAccountIDColumn,
		SecurityID:        SecurityIDColumn,
		Quantity:          QuantityColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
