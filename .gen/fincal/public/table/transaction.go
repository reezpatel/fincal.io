//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Transaction = newTransactionTable("public", "transaction", "")

type transactionTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	WorkspaceID postgres.ColumnInteger
	UserID      postgres.ColumnInteger
	Amount      postgres.ColumnFloat
	FromID      postgres.ColumnInteger
	ToID        postgres.ColumnInteger
	Source      postgres.ColumnString
	Dest        postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	Attachments postgres.ColumnString
	TagIds      postgres.ColumnString
	CategoryID  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TransactionTable struct {
	transactionTable

	EXCLUDED transactionTable
}

// AS creates new TransactionTable with assigned alias
func (a TransactionTable) AS(alias string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TransactionTable with assigned schema name
func (a TransactionTable) FromSchema(schemaName string) *TransactionTable {
	return newTransactionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TransactionTable with assigned table prefix
func (a TransactionTable) WithPrefix(prefix string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TransactionTable with assigned table suffix
func (a TransactionTable) WithSuffix(suffix string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTransactionTable(schemaName, tableName, alias string) *TransactionTable {
	return &TransactionTable{
		transactionTable: newTransactionTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newTransactionTableImpl("", "excluded", ""),
	}
}

func newTransactionTableImpl(schemaName, tableName, alias string) transactionTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		WorkspaceIDColumn = postgres.IntegerColumn("workspace_id")
		UserIDColumn      = postgres.IntegerColumn("user_id")
		AmountColumn      = postgres.FloatColumn("amount")
		FromIDColumn      = postgres.IntegerColumn("from_id")
		ToIDColumn        = postgres.IntegerColumn("to_id")
		SourceColumn      = postgres.StringColumn("source")
		DestColumn        = postgres.StringColumn("dest")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		AttachmentsColumn = postgres.StringColumn("attachments")
		TagIdsColumn      = postgres.StringColumn("tag_ids")
		CategoryIDColumn  = postgres.IntegerColumn("category_id")
		allColumns        = postgres.ColumnList{IDColumn, WorkspaceIDColumn, UserIDColumn, AmountColumn, FromIDColumn, ToIDColumn, SourceColumn, DestColumn, CreatedAtColumn, AttachmentsColumn, TagIdsColumn, CategoryIDColumn}
		mutableColumns    = postgres.ColumnList{WorkspaceIDColumn, UserIDColumn, AmountColumn, FromIDColumn, ToIDColumn, SourceColumn, DestColumn, CreatedAtColumn, AttachmentsColumn, TagIdsColumn, CategoryIDColumn}
	)

	return transactionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		WorkspaceID: WorkspaceIDColumn,
		UserID:      UserIDColumn,
		Amount:      AmountColumn,
		FromID:      FromIDColumn,
		ToID:        ToIDColumn,
		Source:      SourceColumn,
		Dest:        DestColumn,
		CreatedAt:   CreatedAtColumn,
		Attachments: AttachmentsColumn,
		TagIds:      TagIdsColumn,
		CategoryID:  CategoryIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
