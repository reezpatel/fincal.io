//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgStatStatements = newPgStatStatementsTable("public", "pg_stat_statements", "")

type pgStatStatementsTable struct {
	postgres.Table

	// Columns
	Userid               postgres.ColumnString
	Dbid                 postgres.ColumnString
	Toplevel             postgres.ColumnBool
	Queryid              postgres.ColumnInteger
	Query                postgres.ColumnString
	Plans                postgres.ColumnInteger
	TotalPlanTime        postgres.ColumnFloat
	MinPlanTime          postgres.ColumnFloat
	MaxPlanTime          postgres.ColumnFloat
	MeanPlanTime         postgres.ColumnFloat
	StddevPlanTime       postgres.ColumnFloat
	Calls                postgres.ColumnInteger
	TotalExecTime        postgres.ColumnFloat
	MinExecTime          postgres.ColumnFloat
	MaxExecTime          postgres.ColumnFloat
	MeanExecTime         postgres.ColumnFloat
	StddevExecTime       postgres.ColumnFloat
	Rows                 postgres.ColumnInteger
	SharedBlksHit        postgres.ColumnInteger
	SharedBlksRead       postgres.ColumnInteger
	SharedBlksDirtied    postgres.ColumnInteger
	SharedBlksWritten    postgres.ColumnInteger
	LocalBlksHit         postgres.ColumnInteger
	LocalBlksRead        postgres.ColumnInteger
	LocalBlksDirtied     postgres.ColumnInteger
	LocalBlksWritten     postgres.ColumnInteger
	TempBlksRead         postgres.ColumnInteger
	TempBlksWritten      postgres.ColumnInteger
	BlkReadTime          postgres.ColumnFloat
	BlkWriteTime         postgres.ColumnFloat
	TempBlkReadTime      postgres.ColumnFloat
	TempBlkWriteTime     postgres.ColumnFloat
	WalRecords           postgres.ColumnInteger
	WalFpi               postgres.ColumnInteger
	WalBytes             postgres.ColumnFloat
	JitFunctions         postgres.ColumnInteger
	JitGenerationTime    postgres.ColumnFloat
	JitInliningCount     postgres.ColumnInteger
	JitInliningTime      postgres.ColumnFloat
	JitOptimizationCount postgres.ColumnInteger
	JitOptimizationTime  postgres.ColumnFloat
	JitEmissionCount     postgres.ColumnInteger
	JitEmissionTime      postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgStatStatementsTable struct {
	pgStatStatementsTable

	EXCLUDED pgStatStatementsTable
}

// AS creates new PgStatStatementsTable with assigned alias
func (a PgStatStatementsTable) AS(alias string) *PgStatStatementsTable {
	return newPgStatStatementsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PgStatStatementsTable with assigned schema name
func (a PgStatStatementsTable) FromSchema(schemaName string) *PgStatStatementsTable {
	return newPgStatStatementsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PgStatStatementsTable with assigned table prefix
func (a PgStatStatementsTable) WithPrefix(prefix string) *PgStatStatementsTable {
	return newPgStatStatementsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PgStatStatementsTable with assigned table suffix
func (a PgStatStatementsTable) WithSuffix(suffix string) *PgStatStatementsTable {
	return newPgStatStatementsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPgStatStatementsTable(schemaName, tableName, alias string) *PgStatStatementsTable {
	return &PgStatStatementsTable{
		pgStatStatementsTable: newPgStatStatementsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newPgStatStatementsTableImpl("", "excluded", ""),
	}
}

func newPgStatStatementsTableImpl(schemaName, tableName, alias string) pgStatStatementsTable {
	var (
		UseridColumn               = postgres.StringColumn("userid")
		DbidColumn                 = postgres.StringColumn("dbid")
		ToplevelColumn             = postgres.BoolColumn("toplevel")
		QueryidColumn              = postgres.IntegerColumn("queryid")
		QueryColumn                = postgres.StringColumn("query")
		PlansColumn                = postgres.IntegerColumn("plans")
		TotalPlanTimeColumn        = postgres.FloatColumn("total_plan_time")
		MinPlanTimeColumn          = postgres.FloatColumn("min_plan_time")
		MaxPlanTimeColumn          = postgres.FloatColumn("max_plan_time")
		MeanPlanTimeColumn         = postgres.FloatColumn("mean_plan_time")
		StddevPlanTimeColumn       = postgres.FloatColumn("stddev_plan_time")
		CallsColumn                = postgres.IntegerColumn("calls")
		TotalExecTimeColumn        = postgres.FloatColumn("total_exec_time")
		MinExecTimeColumn          = postgres.FloatColumn("min_exec_time")
		MaxExecTimeColumn          = postgres.FloatColumn("max_exec_time")
		MeanExecTimeColumn         = postgres.FloatColumn("mean_exec_time")
		StddevExecTimeColumn       = postgres.FloatColumn("stddev_exec_time")
		RowsColumn                 = postgres.IntegerColumn("rows")
		SharedBlksHitColumn        = postgres.IntegerColumn("shared_blks_hit")
		SharedBlksReadColumn       = postgres.IntegerColumn("shared_blks_read")
		SharedBlksDirtiedColumn    = postgres.IntegerColumn("shared_blks_dirtied")
		SharedBlksWrittenColumn    = postgres.IntegerColumn("shared_blks_written")
		LocalBlksHitColumn         = postgres.IntegerColumn("local_blks_hit")
		LocalBlksReadColumn        = postgres.IntegerColumn("local_blks_read")
		LocalBlksDirtiedColumn     = postgres.IntegerColumn("local_blks_dirtied")
		LocalBlksWrittenColumn     = postgres.IntegerColumn("local_blks_written")
		TempBlksReadColumn         = postgres.IntegerColumn("temp_blks_read")
		TempBlksWrittenColumn      = postgres.IntegerColumn("temp_blks_written")
		BlkReadTimeColumn          = postgres.FloatColumn("blk_read_time")
		BlkWriteTimeColumn         = postgres.FloatColumn("blk_write_time")
		TempBlkReadTimeColumn      = postgres.FloatColumn("temp_blk_read_time")
		TempBlkWriteTimeColumn     = postgres.FloatColumn("temp_blk_write_time")
		WalRecordsColumn           = postgres.IntegerColumn("wal_records")
		WalFpiColumn               = postgres.IntegerColumn("wal_fpi")
		WalBytesColumn             = postgres.FloatColumn("wal_bytes")
		JitFunctionsColumn         = postgres.IntegerColumn("jit_functions")
		JitGenerationTimeColumn    = postgres.FloatColumn("jit_generation_time")
		JitInliningCountColumn     = postgres.IntegerColumn("jit_inlining_count")
		JitInliningTimeColumn      = postgres.FloatColumn("jit_inlining_time")
		JitOptimizationCountColumn = postgres.IntegerColumn("jit_optimization_count")
		JitOptimizationTimeColumn  = postgres.FloatColumn("jit_optimization_time")
		JitEmissionCountColumn     = postgres.IntegerColumn("jit_emission_count")
		JitEmissionTimeColumn      = postgres.FloatColumn("jit_emission_time")
		allColumns                 = postgres.ColumnList{UseridColumn, DbidColumn, ToplevelColumn, QueryidColumn, QueryColumn, PlansColumn, TotalPlanTimeColumn, MinPlanTimeColumn, MaxPlanTimeColumn, MeanPlanTimeColumn, StddevPlanTimeColumn, CallsColumn, TotalExecTimeColumn, MinExecTimeColumn, MaxExecTimeColumn, MeanExecTimeColumn, StddevExecTimeColumn, RowsColumn, SharedBlksHitColumn, SharedBlksReadColumn, SharedBlksDirtiedColumn, SharedBlksWrittenColumn, LocalBlksHitColumn, LocalBlksReadColumn, LocalBlksDirtiedColumn, LocalBlksWrittenColumn, TempBlksReadColumn, TempBlksWrittenColumn, BlkReadTimeColumn, BlkWriteTimeColumn, TempBlkReadTimeColumn, TempBlkWriteTimeColumn, WalRecordsColumn, WalFpiColumn, WalBytesColumn, JitFunctionsColumn, JitGenerationTimeColumn, JitInliningCountColumn, JitInliningTimeColumn, JitOptimizationCountColumn, JitOptimizationTimeColumn, JitEmissionCountColumn, JitEmissionTimeColumn}
		mutableColumns             = postgres.ColumnList{UseridColumn, DbidColumn, ToplevelColumn, QueryidColumn, QueryColumn, PlansColumn, TotalPlanTimeColumn, MinPlanTimeColumn, MaxPlanTimeColumn, MeanPlanTimeColumn, StddevPlanTimeColumn, CallsColumn, TotalExecTimeColumn, MinExecTimeColumn, MaxExecTimeColumn, MeanExecTimeColumn, StddevExecTimeColumn, RowsColumn, SharedBlksHitColumn, SharedBlksReadColumn, SharedBlksDirtiedColumn, SharedBlksWrittenColumn, LocalBlksHitColumn, LocalBlksReadColumn, LocalBlksDirtiedColumn, LocalBlksWrittenColumn, TempBlksReadColumn, TempBlksWrittenColumn, BlkReadTimeColumn, BlkWriteTimeColumn, TempBlkReadTimeColumn, TempBlkWriteTimeColumn, WalRecordsColumn, WalFpiColumn, WalBytesColumn, JitFunctionsColumn, JitGenerationTimeColumn, JitInliningCountColumn, JitInliningTimeColumn, JitOptimizationCountColumn, JitOptimizationTimeColumn, JitEmissionCountColumn, JitEmissionTimeColumn}
	)

	return pgStatStatementsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Userid:               UseridColumn,
		Dbid:                 DbidColumn,
		Toplevel:             ToplevelColumn,
		Queryid:              QueryidColumn,
		Query:                QueryColumn,
		Plans:                PlansColumn,
		TotalPlanTime:        TotalPlanTimeColumn,
		MinPlanTime:          MinPlanTimeColumn,
		MaxPlanTime:          MaxPlanTimeColumn,
		MeanPlanTime:         MeanPlanTimeColumn,
		StddevPlanTime:       StddevPlanTimeColumn,
		Calls:                CallsColumn,
		TotalExecTime:        TotalExecTimeColumn,
		MinExecTime:          MinExecTimeColumn,
		MaxExecTime:          MaxExecTimeColumn,
		MeanExecTime:         MeanExecTimeColumn,
		StddevExecTime:       StddevExecTimeColumn,
		Rows:                 RowsColumn,
		SharedBlksHit:        SharedBlksHitColumn,
		SharedBlksRead:       SharedBlksReadColumn,
		SharedBlksDirtied:    SharedBlksDirtiedColumn,
		SharedBlksWritten:    SharedBlksWrittenColumn,
		LocalBlksHit:         LocalBlksHitColumn,
		LocalBlksRead:        LocalBlksReadColumn,
		LocalBlksDirtied:     LocalBlksDirtiedColumn,
		LocalBlksWritten:     LocalBlksWrittenColumn,
		TempBlksRead:         TempBlksReadColumn,
		TempBlksWritten:      TempBlksWrittenColumn,
		BlkReadTime:          BlkReadTimeColumn,
		BlkWriteTime:         BlkWriteTimeColumn,
		TempBlkReadTime:      TempBlkReadTimeColumn,
		TempBlkWriteTime:     TempBlkWriteTimeColumn,
		WalRecords:           WalRecordsColumn,
		WalFpi:               WalFpiColumn,
		WalBytes:             WalBytesColumn,
		JitFunctions:         JitFunctionsColumn,
		JitGenerationTime:    JitGenerationTimeColumn,
		JitInliningCount:     JitInliningCountColumn,
		JitInliningTime:      JitInliningTimeColumn,
		JitOptimizationCount: JitOptimizationCountColumn,
		JitOptimizationTime:  JitOptimizationTimeColumn,
		JitEmissionCount:     JitEmissionCountColumn,
		JitEmissionTime:      JitEmissionTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
