//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgStatStatementsInfo = newPgStatStatementsInfoTable("public", "pg_stat_statements_info", "")

type pgStatStatementsInfoTable struct {
	postgres.Table

	// Columns
	Dealloc    postgres.ColumnInteger
	StatsReset postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgStatStatementsInfoTable struct {
	pgStatStatementsInfoTable

	EXCLUDED pgStatStatementsInfoTable
}

// AS creates new PgStatStatementsInfoTable with assigned alias
func (a PgStatStatementsInfoTable) AS(alias string) *PgStatStatementsInfoTable {
	return newPgStatStatementsInfoTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PgStatStatementsInfoTable with assigned schema name
func (a PgStatStatementsInfoTable) FromSchema(schemaName string) *PgStatStatementsInfoTable {
	return newPgStatStatementsInfoTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PgStatStatementsInfoTable with assigned table prefix
func (a PgStatStatementsInfoTable) WithPrefix(prefix string) *PgStatStatementsInfoTable {
	return newPgStatStatementsInfoTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PgStatStatementsInfoTable with assigned table suffix
func (a PgStatStatementsInfoTable) WithSuffix(suffix string) *PgStatStatementsInfoTable {
	return newPgStatStatementsInfoTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPgStatStatementsInfoTable(schemaName, tableName, alias string) *PgStatStatementsInfoTable {
	return &PgStatStatementsInfoTable{
		pgStatStatementsInfoTable: newPgStatStatementsInfoTableImpl(schemaName, tableName, alias),
		EXCLUDED:                  newPgStatStatementsInfoTableImpl("", "excluded", ""),
	}
}

func newPgStatStatementsInfoTableImpl(schemaName, tableName, alias string) pgStatStatementsInfoTable {
	var (
		DeallocColumn    = postgres.IntegerColumn("dealloc")
		StatsResetColumn = postgres.TimestampzColumn("stats_reset")
		allColumns       = postgres.ColumnList{DeallocColumn, StatsResetColumn}
		mutableColumns   = postgres.ColumnList{DeallocColumn, StatsResetColumn}
	)

	return pgStatStatementsInfoTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Dealloc:    DeallocColumn,
		StatsReset: StatsResetColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
