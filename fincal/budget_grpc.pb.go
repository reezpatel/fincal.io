// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/budget.proto

package fincal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BudgetService_Envelopes_FullMethodName                = "/fincal.BudgetService/Envelopes"
	BudgetService_CreateEnvelope_FullMethodName           = "/fincal.BudgetService/createEnvelope"
	BudgetService_DeleteEnvelope_FullMethodName           = "/fincal.BudgetService/deleteEnvelope"
	BudgetService_EnvelopeTemplates_FullMethodName        = "/fincal.BudgetService/EnvelopeTemplates"
	BudgetService_CreateEnvelopeTemplate_FullMethodName   = "/fincal.BudgetService/createEnvelopeTemplate"
	BudgetService_DeleteEnvelopeTemplate_FullMethodName   = "/fincal.BudgetService/deleteEnvelopeTemplate"
	BudgetService_EnvelopeAllocations_FullMethodName      = "/fincal.BudgetService/EnvelopeAllocations"
	BudgetService_CreateEnvelopeAllocation_FullMethodName = "/fincal.BudgetService/createEnvelopeAllocation"
	BudgetService_DeleteEnvelopeAllocation_FullMethodName = "/fincal.BudgetService/deleteEnvelopeAllocation"
)

// BudgetServiceClient is the client API for BudgetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BudgetServiceClient interface {
	Envelopes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EnvelopesResponse, error)
	CreateEnvelope(ctx context.Context, in *CreateEnvelopeRequest, opts ...grpc.CallOption) (*CreateEnvelopeResponse, error)
	DeleteEnvelope(ctx context.Context, in *DeleteEnvelopeRequest, opts ...grpc.CallOption) (*DeleteEnvelopeResponse, error)
	EnvelopeTemplates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EnvelopeTemplatesResponse, error)
	CreateEnvelopeTemplate(ctx context.Context, in *CreateEnvelopeTemplateRequest, opts ...grpc.CallOption) (*CreateEnvelopeTemplateResponse, error)
	DeleteEnvelopeTemplate(ctx context.Context, in *DeleteEnvelopeTemplateRequest, opts ...grpc.CallOption) (*DeleteEnvelopeTemplateResponse, error)
	EnvelopeAllocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EnvelopeAllocationsResponse, error)
	CreateEnvelopeAllocation(ctx context.Context, in *CreateEnvelopeAllocationRequest, opts ...grpc.CallOption) (*CreateEnvelopeAllocationResponse, error)
	DeleteEnvelopeAllocation(ctx context.Context, in *DeleteEnvelopeAllocationRequest, opts ...grpc.CallOption) (*DeleteEnvelopeAllocationResponse, error)
}

type budgetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBudgetServiceClient(cc grpc.ClientConnInterface) BudgetServiceClient {
	return &budgetServiceClient{cc}
}

func (c *budgetServiceClient) Envelopes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EnvelopesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnvelopesResponse)
	err := c.cc.Invoke(ctx, BudgetService_Envelopes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) CreateEnvelope(ctx context.Context, in *CreateEnvelopeRequest, opts ...grpc.CallOption) (*CreateEnvelopeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEnvelopeResponse)
	err := c.cc.Invoke(ctx, BudgetService_CreateEnvelope_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) DeleteEnvelope(ctx context.Context, in *DeleteEnvelopeRequest, opts ...grpc.CallOption) (*DeleteEnvelopeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEnvelopeResponse)
	err := c.cc.Invoke(ctx, BudgetService_DeleteEnvelope_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) EnvelopeTemplates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EnvelopeTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnvelopeTemplatesResponse)
	err := c.cc.Invoke(ctx, BudgetService_EnvelopeTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) CreateEnvelopeTemplate(ctx context.Context, in *CreateEnvelopeTemplateRequest, opts ...grpc.CallOption) (*CreateEnvelopeTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEnvelopeTemplateResponse)
	err := c.cc.Invoke(ctx, BudgetService_CreateEnvelopeTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) DeleteEnvelopeTemplate(ctx context.Context, in *DeleteEnvelopeTemplateRequest, opts ...grpc.CallOption) (*DeleteEnvelopeTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEnvelopeTemplateResponse)
	err := c.cc.Invoke(ctx, BudgetService_DeleteEnvelopeTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) EnvelopeAllocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EnvelopeAllocationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnvelopeAllocationsResponse)
	err := c.cc.Invoke(ctx, BudgetService_EnvelopeAllocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) CreateEnvelopeAllocation(ctx context.Context, in *CreateEnvelopeAllocationRequest, opts ...grpc.CallOption) (*CreateEnvelopeAllocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEnvelopeAllocationResponse)
	err := c.cc.Invoke(ctx, BudgetService_CreateEnvelopeAllocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) DeleteEnvelopeAllocation(ctx context.Context, in *DeleteEnvelopeAllocationRequest, opts ...grpc.CallOption) (*DeleteEnvelopeAllocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEnvelopeAllocationResponse)
	err := c.cc.Invoke(ctx, BudgetService_DeleteEnvelopeAllocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BudgetServiceServer is the server API for BudgetService service.
// All implementations must embed UnimplementedBudgetServiceServer
// for forward compatibility.
type BudgetServiceServer interface {
	Envelopes(context.Context, *emptypb.Empty) (*EnvelopesResponse, error)
	CreateEnvelope(context.Context, *CreateEnvelopeRequest) (*CreateEnvelopeResponse, error)
	DeleteEnvelope(context.Context, *DeleteEnvelopeRequest) (*DeleteEnvelopeResponse, error)
	EnvelopeTemplates(context.Context, *emptypb.Empty) (*EnvelopeTemplatesResponse, error)
	CreateEnvelopeTemplate(context.Context, *CreateEnvelopeTemplateRequest) (*CreateEnvelopeTemplateResponse, error)
	DeleteEnvelopeTemplate(context.Context, *DeleteEnvelopeTemplateRequest) (*DeleteEnvelopeTemplateResponse, error)
	EnvelopeAllocations(context.Context, *emptypb.Empty) (*EnvelopeAllocationsResponse, error)
	CreateEnvelopeAllocation(context.Context, *CreateEnvelopeAllocationRequest) (*CreateEnvelopeAllocationResponse, error)
	DeleteEnvelopeAllocation(context.Context, *DeleteEnvelopeAllocationRequest) (*DeleteEnvelopeAllocationResponse, error)
	mustEmbedUnimplementedBudgetServiceServer()
}

// UnimplementedBudgetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBudgetServiceServer struct{}

func (UnimplementedBudgetServiceServer) Envelopes(context.Context, *emptypb.Empty) (*EnvelopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Envelopes not implemented")
}
func (UnimplementedBudgetServiceServer) CreateEnvelope(context.Context, *CreateEnvelopeRequest) (*CreateEnvelopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvelope not implemented")
}
func (UnimplementedBudgetServiceServer) DeleteEnvelope(context.Context, *DeleteEnvelopeRequest) (*DeleteEnvelopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvelope not implemented")
}
func (UnimplementedBudgetServiceServer) EnvelopeTemplates(context.Context, *emptypb.Empty) (*EnvelopeTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnvelopeTemplates not implemented")
}
func (UnimplementedBudgetServiceServer) CreateEnvelopeTemplate(context.Context, *CreateEnvelopeTemplateRequest) (*CreateEnvelopeTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvelopeTemplate not implemented")
}
func (UnimplementedBudgetServiceServer) DeleteEnvelopeTemplate(context.Context, *DeleteEnvelopeTemplateRequest) (*DeleteEnvelopeTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvelopeTemplate not implemented")
}
func (UnimplementedBudgetServiceServer) EnvelopeAllocations(context.Context, *emptypb.Empty) (*EnvelopeAllocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnvelopeAllocations not implemented")
}
func (UnimplementedBudgetServiceServer) CreateEnvelopeAllocation(context.Context, *CreateEnvelopeAllocationRequest) (*CreateEnvelopeAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvelopeAllocation not implemented")
}
func (UnimplementedBudgetServiceServer) DeleteEnvelopeAllocation(context.Context, *DeleteEnvelopeAllocationRequest) (*DeleteEnvelopeAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvelopeAllocation not implemented")
}
func (UnimplementedBudgetServiceServer) mustEmbedUnimplementedBudgetServiceServer() {}
func (UnimplementedBudgetServiceServer) testEmbeddedByValue()                       {}

// UnsafeBudgetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BudgetServiceServer will
// result in compilation errors.
type UnsafeBudgetServiceServer interface {
	mustEmbedUnimplementedBudgetServiceServer()
}

func RegisterBudgetServiceServer(s grpc.ServiceRegistrar, srv BudgetServiceServer) {
	// If the following call pancis, it indicates UnimplementedBudgetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BudgetService_ServiceDesc, srv)
}

func _BudgetService_Envelopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).Envelopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_Envelopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).Envelopes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_CreateEnvelope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvelopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).CreateEnvelope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_CreateEnvelope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).CreateEnvelope(ctx, req.(*CreateEnvelopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_DeleteEnvelope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvelopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).DeleteEnvelope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_DeleteEnvelope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).DeleteEnvelope(ctx, req.(*DeleteEnvelopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_EnvelopeTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).EnvelopeTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_EnvelopeTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).EnvelopeTemplates(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_CreateEnvelopeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvelopeTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).CreateEnvelopeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_CreateEnvelopeTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).CreateEnvelopeTemplate(ctx, req.(*CreateEnvelopeTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_DeleteEnvelopeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvelopeTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).DeleteEnvelopeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_DeleteEnvelopeTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).DeleteEnvelopeTemplate(ctx, req.(*DeleteEnvelopeTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_EnvelopeAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).EnvelopeAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_EnvelopeAllocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).EnvelopeAllocations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_CreateEnvelopeAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvelopeAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).CreateEnvelopeAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_CreateEnvelopeAllocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).CreateEnvelopeAllocation(ctx, req.(*CreateEnvelopeAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_DeleteEnvelopeAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvelopeAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).DeleteEnvelopeAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_DeleteEnvelopeAllocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).DeleteEnvelopeAllocation(ctx, req.(*DeleteEnvelopeAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BudgetService_ServiceDesc is the grpc.ServiceDesc for BudgetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BudgetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fincal.BudgetService",
	HandlerType: (*BudgetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Envelopes",
			Handler:    _BudgetService_Envelopes_Handler,
		},
		{
			MethodName: "createEnvelope",
			Handler:    _BudgetService_CreateEnvelope_Handler,
		},
		{
			MethodName: "deleteEnvelope",
			Handler:    _BudgetService_DeleteEnvelope_Handler,
		},
		{
			MethodName: "EnvelopeTemplates",
			Handler:    _BudgetService_EnvelopeTemplates_Handler,
		},
		{
			MethodName: "createEnvelopeTemplate",
			Handler:    _BudgetService_CreateEnvelopeTemplate_Handler,
		},
		{
			MethodName: "deleteEnvelopeTemplate",
			Handler:    _BudgetService_DeleteEnvelopeTemplate_Handler,
		},
		{
			MethodName: "EnvelopeAllocations",
			Handler:    _BudgetService_EnvelopeAllocations_Handler,
		},
		{
			MethodName: "createEnvelopeAllocation",
			Handler:    _BudgetService_CreateEnvelopeAllocation_Handler,
		},
		{
			MethodName: "deleteEnvelopeAllocation",
			Handler:    _BudgetService_DeleteEnvelopeAllocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/budget.proto",
}
