// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/goal.proto

package fincal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoalService_Goals_FullMethodName                  = "/fincal.GoalService/Goals"
	GoalService_CreateGoal_FullMethodName             = "/fincal.GoalService/createGoal"
	GoalService_DeleteGoal_FullMethodName             = "/fincal.GoalService/deleteGoal"
	GoalService_GoalDistributions_FullMethodName      = "/fincal.GoalService/GoalDistributions"
	GoalService_CreateGoalDistribution_FullMethodName = "/fincal.GoalService/createGoalDistribution"
	GoalService_DeleteGoalDistribution_FullMethodName = "/fincal.GoalService/deleteGoalDistribution"
)

// GoalServiceClient is the client API for GoalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoalServiceClient interface {
	Goals(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GoalsResponse, error)
	CreateGoal(ctx context.Context, in *CreateGoalRequest, opts ...grpc.CallOption) (*CreateGoalResponse, error)
	DeleteGoal(ctx context.Context, in *DeleteGoalRequest, opts ...grpc.CallOption) (*DeleteGoalResponse, error)
	GoalDistributions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GoalDistributionsResponse, error)
	CreateGoalDistribution(ctx context.Context, in *CreateGoalDistributionRequest, opts ...grpc.CallOption) (*CreateGoalDistributionResponse, error)
	DeleteGoalDistribution(ctx context.Context, in *DeleteGoalDistributionRequest, opts ...grpc.CallOption) (*DeleteGoalDistributionResponse, error)
}

type goalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoalServiceClient(cc grpc.ClientConnInterface) GoalServiceClient {
	return &goalServiceClient{cc}
}

func (c *goalServiceClient) Goals(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GoalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalsResponse)
	err := c.cc.Invoke(ctx, GoalService_Goals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) CreateGoal(ctx context.Context, in *CreateGoalRequest, opts ...grpc.CallOption) (*CreateGoalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGoalResponse)
	err := c.cc.Invoke(ctx, GoalService_CreateGoal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) DeleteGoal(ctx context.Context, in *DeleteGoalRequest, opts ...grpc.CallOption) (*DeleteGoalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGoalResponse)
	err := c.cc.Invoke(ctx, GoalService_DeleteGoal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) GoalDistributions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GoalDistributionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalDistributionsResponse)
	err := c.cc.Invoke(ctx, GoalService_GoalDistributions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) CreateGoalDistribution(ctx context.Context, in *CreateGoalDistributionRequest, opts ...grpc.CallOption) (*CreateGoalDistributionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGoalDistributionResponse)
	err := c.cc.Invoke(ctx, GoalService_CreateGoalDistribution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) DeleteGoalDistribution(ctx context.Context, in *DeleteGoalDistributionRequest, opts ...grpc.CallOption) (*DeleteGoalDistributionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGoalDistributionResponse)
	err := c.cc.Invoke(ctx, GoalService_DeleteGoalDistribution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoalServiceServer is the server API for GoalService service.
// All implementations must embed UnimplementedGoalServiceServer
// for forward compatibility.
type GoalServiceServer interface {
	Goals(context.Context, *emptypb.Empty) (*GoalsResponse, error)
	CreateGoal(context.Context, *CreateGoalRequest) (*CreateGoalResponse, error)
	DeleteGoal(context.Context, *DeleteGoalRequest) (*DeleteGoalResponse, error)
	GoalDistributions(context.Context, *emptypb.Empty) (*GoalDistributionsResponse, error)
	CreateGoalDistribution(context.Context, *CreateGoalDistributionRequest) (*CreateGoalDistributionResponse, error)
	DeleteGoalDistribution(context.Context, *DeleteGoalDistributionRequest) (*DeleteGoalDistributionResponse, error)
	mustEmbedUnimplementedGoalServiceServer()
}

// UnimplementedGoalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoalServiceServer struct{}

func (UnimplementedGoalServiceServer) Goals(context.Context, *emptypb.Empty) (*GoalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Goals not implemented")
}
func (UnimplementedGoalServiceServer) CreateGoal(context.Context, *CreateGoalRequest) (*CreateGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoal not implemented")
}
func (UnimplementedGoalServiceServer) DeleteGoal(context.Context, *DeleteGoalRequest) (*DeleteGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoal not implemented")
}
func (UnimplementedGoalServiceServer) GoalDistributions(context.Context, *emptypb.Empty) (*GoalDistributionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoalDistributions not implemented")
}
func (UnimplementedGoalServiceServer) CreateGoalDistribution(context.Context, *CreateGoalDistributionRequest) (*CreateGoalDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoalDistribution not implemented")
}
func (UnimplementedGoalServiceServer) DeleteGoalDistribution(context.Context, *DeleteGoalDistributionRequest) (*DeleteGoalDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoalDistribution not implemented")
}
func (UnimplementedGoalServiceServer) mustEmbedUnimplementedGoalServiceServer() {}
func (UnimplementedGoalServiceServer) testEmbeddedByValue()                     {}

// UnsafeGoalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoalServiceServer will
// result in compilation errors.
type UnsafeGoalServiceServer interface {
	mustEmbedUnimplementedGoalServiceServer()
}

func RegisterGoalServiceServer(s grpc.ServiceRegistrar, srv GoalServiceServer) {
	// If the following call pancis, it indicates UnimplementedGoalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoalService_ServiceDesc, srv)
}

func _GoalService_Goals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).Goals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_Goals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).Goals(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_CreateGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).CreateGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_CreateGoal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).CreateGoal(ctx, req.(*CreateGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_DeleteGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).DeleteGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_DeleteGoal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).DeleteGoal(ctx, req.(*DeleteGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_GoalDistributions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).GoalDistributions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_GoalDistributions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).GoalDistributions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_CreateGoalDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoalDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).CreateGoalDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_CreateGoalDistribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).CreateGoalDistribution(ctx, req.(*CreateGoalDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_DeleteGoalDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoalDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).DeleteGoalDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_DeleteGoalDistribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).DeleteGoalDistribution(ctx, req.(*DeleteGoalDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoalService_ServiceDesc is the grpc.ServiceDesc for GoalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fincal.GoalService",
	HandlerType: (*GoalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Goals",
			Handler:    _GoalService_Goals_Handler,
		},
		{
			MethodName: "createGoal",
			Handler:    _GoalService_CreateGoal_Handler,
		},
		{
			MethodName: "deleteGoal",
			Handler:    _GoalService_DeleteGoal_Handler,
		},
		{
			MethodName: "GoalDistributions",
			Handler:    _GoalService_GoalDistributions_Handler,
		},
		{
			MethodName: "createGoalDistribution",
			Handler:    _GoalService_CreateGoalDistribution_Handler,
		},
		{
			MethodName: "deleteGoalDistribution",
			Handler:    _GoalService_DeleteGoalDistribution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/goal.proto",
}
